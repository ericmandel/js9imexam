/*jslint white: true, vars: true, plusplus: true, nomen: true, unparam: true */
/*globals $, JS9, imexam */ 

"use strict";


(function() {
      var imexam = require("./imexam");
    //var conrec = require("./conrec");
      var contfv = require("./contfv");

    function drawContours(div, display) {
	var i;
	var im   = JS9.GetImage(display);
	var form = $(div).find(".contour-form")[0];

	var data = imexam.ndops.ndarray(im.raw.data, [im.raw.height, im.raw.width]);

	var levelString = form.level.value;

	var level = JSON.parse("[" + levelString.split(/\s+/).join(",") + "]");

	if ( false ) {
	    var c      = new conrec.Conrec();

	    try {
		c.contour(data
			, 0, data.shape[0]-1, 0, data.shape[1]-1
			, imexam.ndops.iota(1, data.shape[0]), imexam.ndops.iota(1, data.shape[1])
			, level.length, level);
	    } catch (e) {
		alert("Too many coutour segments: Check your coutour levels.\n\nAre you trying to coutour the background levels of an image?");
		return;
	    }


	    var contours = c.contourList().map(function(contour) {
		    return { shape: "polygon", pts: contour };
		    });
	} else {
	    var contours = [];
	    var points   = [];

	    contours.push({ shape: "polygon", pts: points });

	    contfv(level, data.shape[0], data.shape[1], data.data
		, function(x, y, level) {
		    if ( level === undefined ) {
			points = [];
			contours.push({ shape: "polygon", pts: points });
		    } else {
			points.push({ x: x+0.5, y: y+0.5 });
		    }
		  });
	}

	contours.length = contours.length-1;


	JS9.NewShapeLayer(im, "contour", JS9.Catalogs.opts);
	JS9.RemoveShapes(im, "contour");
	JS9.AddShapes(im, "contour", contours, {color: "yellow"});
    }

    function getMinMax(div, display) {
	var im  = JS9.GetImage(display);

	if ( im ) {
	    var form = $(div).find(".contour-form")[0];
	    var data = imexam.ndops.ndarray(im.raw.data, [im.raw.width, im.raw.height]);

	    form.min.value = imexam.ndops.minvalue(data).toFixed(2);
	    form.max.value = imexam.ndops.maxvalue(data).toFixed(2);
	}
    }

    function makeLevel(div, display) {
	var i;
	var im  = JS9.GetImage(display);

	if ( im ) {
	    var form = $(div).find(".contour-form")[0];

	    var n     = Number(form.nlevel.value);
	    var level = imexam.ndops.ndarray(imexam.ndops.iota(1, n));

	    var min   = Number(form.min.value);
	    var max   = Number(form.max.value);

	    imexam.ndops.divs(level, level, n+1);		// Try n levels from min to max.
	    imexam.ndops.muls(level, level, max-min);
	    imexam.ndops.adds(level, level, min);

	    var levText = [];
	    for ( i = 0; i < level.shape[0]; i++ ) {
		levText.push(level.data[i].toFixed(2));
	    }

	    form.level.value = levText.join("\n");
	}
    }

    function contInit() {
	var im  = JS9.GetImage(this.display);
	var div = this.div;

	div.innerHTML = '<form class="contour-form">							\
	    <table><tr>	<td>N</td>									\
			<td><input type=text name=nlevel value=10 size=10></td>				\
		       	<td><input type=button value="Draw Contours" class="drw-contour"></td></tr>	\
	           <tr>	<td>Min</td>									\
			<td><input type=text name=min size=10></td>					\
		       	<td><input type=button value="Set Min/Max" class="get-min-max"></td></tr>	\
	           <tr>	<td>Max</td>									\
			<td><input type=text name=max size=10></td></tr>				\
	           <tr>	<td valign=top>Levels:</td>							\
	    		<td><textarea type=textarea rows=12 cols=10 name=level class="contour-levels">	\
			    </textarea>									\
		       	<td valign=top><input type=button value="Make Levels" class="make-levels"></td>	\
		   </tr>										\
	    </table>											\
	    <p>												\
	    </form>';

	var display = this.display;

	$(div).find(".drw-contour").click(function () { drawContours(div, display); });
	$(div).find(".get-min-max").click(function () { getMinMax(div, display); });
	$(div).find(".make-levels").click(function () { makeLevel(div, display); });


	if ( im !== undefined ) {
	    getMinMax(div, display);
	    makeLevel(div, display);
	}

	imexam.fixupDiv(this);
    }

    JS9.RegisterPlugin("ImExam", "Contours", contInit, {
	    menu: "view",

            winTitle: "Contours",
            menuItem: "Contours",
	    help:     "imexam/coutours.html",

	    toolbarSeparate: true,
	    toolbarHTML: "$title",

            winDims: [250, 250],
    });
}());

